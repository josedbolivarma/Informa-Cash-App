{"version":3,"file":"static/js/2517.23dd4211.chunk.js","mappings":"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","sources":["components/Elements/Toast/Toast.tsx","../node_modules/react-bootstrap/esm/createChainedFunction.js","../node_modules/react-bootstrap/esm/Collapse.js"],"sourcesContent":["import React from \"react\";\nimport { Breadcrumb, Button, Card, Col, Collapse, Form, Row,Toast } from \"react-bootstrap\";\nexport function Toasts() {\n  const [show,setShow] = React.useState(true)\n  const [Basic,setBasic] = React.useState(true)\n  const [Basiccollapse, setBasiccollapse] = React.useState(false)\n  const [Stacking, setStacking] = React.useState(true)\n  const [Stackingcollapse, setStackingcollapse] = React.useState(false)\n  const [Stacking2, setStacking2] = React.useState(true)\n  const [Right, setRight] = React.useState(true)\n  const [Rightcollapse, setRightcollapse] = React.useState(false)\n  \n  const [Listcollapse, setListcollapse] = React.useState(false);\n  function handleRemove(id:any) {\n    const newList = list.filter((list:any) => list.id !== id);\n    setList(newList);\n  }\n  \n  const Carouseldata = [\n    {\n      id: \"1\",\n      TITLE: \"bg-primary\",\n    },\n    {\n      id: \"2\",\n      TITLE: \"bg-secondary\",\n    },\n    {\n      id: \"3\",\n      TITLE: \"bg-success\",\n  \n    },\n    {\n      id: \"4\",\n      TITLE: \"bg-info\",\n    },\n  ];\n  const [list, setList] = React.useState(Carouseldata);\n  return (\n    <div>\n      {/* <!-- breadcrumb --> */}\n      <div className=\"breadcrumb-header justify-content-between\">\n        <div className=\"left-content\">\n          <span className=\"main-content-title mg-b-0 mg-b-lg-1\">TOAST</span>\n        </div>\n        <div className=\"justify-content-center mt-2\">\n          <Breadcrumb className=\"breadcrumb\">\n            <Breadcrumb.Item className=\"breadcrumb-item tx-15\" href=\"#\">\n              Elements\n            </Breadcrumb.Item>\n            <Breadcrumb.Item\n              className=\"breadcrumb-item \"\n              active\n              aria-current=\"page\"\n            >\n              Toast\n            </Breadcrumb.Item>\n          </Breadcrumb>\n        </div>\n      </div>\n      {/* <!-- /breadcrumb --> */}\n\n      {/* <!-- Row --> */}\n      <Row>\n        <Col xl={12} lg={12}>\n          <Card className=\"custom-card\" id=\"basic\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                <h6 className=\"card-title mb-1\">Basic Example</h6>\n                  <Form className=\"ms-auto\">\n                    <Form.Check\n                      label=\"Show Code\"\n                       type=\"switch\"\n                      id=\"custom-switch\"\n                      onClick={() => setBasiccollapse(!Basiccollapse)}\n                      className=\"showcode d-flex ms-auto \"\n                    />\n                  </Form>\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Toasts are as flexible as you need and have very little\n                  required markup. At a minimum, we require a single element to\n                  contain your “toasted” content and strongly encourage a\n                  dismiss button.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <div className=\"demo-static-toast\">\n                    {Basic ? (\n                      <Toast\n                        aria-atomic=\"true\"\n                        aria-live=\"assertive\"\n                        className=\"toast fade show\"\n                        role=\"alert\"\n                        data-bs-autohide=\"false\"\n                      >\n                        <Toast.Header className=\"toast-header\">\n                          <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                          <small className=\"text-muted me-3\">11 mins ago</small>\n                          <Button\n                            variant=\"\"\n                            aria-label=\"Close\"\n                            className=\"ms-2 mb-1 close\"\n                            onClick={() => setBasic(false)}\n                            data-bs-dismiss=\"toast\"\n                            type=\"button\"\n                          >\n                            <span aria-hidden=\"true\">&times;</span>\n                          </Button>\n                        </Toast.Header>\n                        <Toast.Body className=\"toast-body\">\n                          Hello, world! This is a toast message.\n                        </Toast.Body>\n                      </Toast>\n                    ) : null}\n                  </div>\n                  \n                </div>\n                <Collapse in={Basiccollapse} className=\"mt-2\">\n                  <pre>\n                    <code>\n                      {`\n<div className=\"demo-static-toast\">\n  {Basic ? (\n    <Toast\n      aria-atomic=\"true\"\n      aria-live=\"assertive\"\n      className=\"toast fade show\"\n      role=\"alert\"\n      data-bs-autohide=\"false\"\n    >\n      <Toast.Header className=\"toast-header\">\n        <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n        <small className=\"text-muted me-3\">11 mins ago</small>\n        <Button\n          variant=\"\"\n          aria-label=\"Close\"\n          className=\"ms-2 mb-1 close\"\n          onClick={() => setBasic(false)}\n          data-bs-dismiss=\"toast\"\n          type=\"button\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </Button>\n      </Toast.Header>\n      <Toast.Body className=\"toast-body\">\n        Hello, world! This is a toast message.\n      </Toast.Body>\n    </Toast>\n  ) : null}\n</div>\n                        `}\n                    </code>\n                  </pre>\n                </Collapse>\n              </div>\n            </Card.Body>\n          </Card>\n          <Card className=\"custom-card\" id=\"stacking\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                <h6 className=\"card-title mb-1\">Stacking</h6>\n                  <Form className=\"ms-auto\">\n                    <Form.Check\n                      label=\"Show Code\"\n                       type=\"switch\"\n                      id=\"custom-switch\"\n                      onClick={() => setStackingcollapse(!Stackingcollapse)}\n                      className=\"showcode d-flex ms-auto \"\n                    />\n                  </Form>\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  When you have multiple toasts, we default to vertiaclly\n                  stacking them in a readable manner.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <div className=\"demo-static-toast\">\n                    <>\n                      {Stacking ? (\n                        <Toast\n                          aria-atomic=\"true\"\n                          aria-live=\"assertive\"\n                          className=\"toast fade show\"\n                          role=\"alert\"\n                          data-bs-autohide=\"false\"\n                        >\n                          <Toast.Header className=\"toast-header\">\n                            <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                            <small className=\"text-muted me-3\">Just now</small>\n                            <Button\n                              variant=\"\"\n                              aria-label=\"Close\"\n                              className=\"ms-2 mb-1 close\"\n                              onClick={() => setStacking(false)}\n                              data-bs-dismiss=\"toast\"\n                              type=\"button\"\n                            >\n                              <span aria-hidden=\"true\">&times;</span>\n                            </Button>\n                          </Toast.Header>\n                          <Toast.Body className=\"toast-body\">See? Just like this.</Toast.Body>\n                        </Toast>\n                      ) : null}\n                    </>\n                    {Stacking2 ? (\n                      <Toast\n                        aria-atomic=\"true\"\n                        aria-live=\"assertive\"\n                        className=\"toast fade show\"\n                        role=\"alert\"\n                        data-bs-autohide=\"false\"\n                      >\n                        <Toast.Header className=\"toast-header\">\n                          <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                          <small className=\"text-muted me-3\">11 mins ago</small>{\" \"}\n                          <Button\n                            variant=\"\"\n                            aria-label=\"Close\"\n                            className=\"ms-2 mb-1 close tx-normal\"\n                            data-bs-dismiss=\"toast\"\n                            onClick={() => setStacking2(false)}\n                            type=\"button\"\n                          >\n                            <span aria-hidden=\"true\">&times;</span>\n                          </Button>\n                        </Toast.Header>\n                        <Toast.Body className=\"toast-body\">\n                          Hello, world! This is a toast message.\n                        </Toast.Body>\n                      </Toast>\n                    ) : null}\n                  </div>\n                  <Collapse in={Stackingcollapse} className=\"mt-2\">\n                    <pre>\n                      <code>\n                        {`\n<div className=\"demo-static-toast\">\n  <>\n    {Stacking ? (\n      <Toast\n        aria-atomic=\"true\"\n        aria-live=\"assertive\"\n        className=\"toast fade show\"\n        role=\"alert\"\n        data-bs-autohide=\"false\"\n      >\n        <Toast.Header className=\"toast-header\">\n          <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n          <small className=\"text-muted me-3\">Just now</small>\n          <Button\n            variant=\"\"\n            aria-label=\"Close\"\n            className=\"ms-2 mb-1 close\"\n            onClick={() => setStacking(false)}\n            data-bs-dismiss=\"toast\"\n            type=\"button\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </Button>\n        </Toast.Header>\n        <Toast.Body className=\"toast-body\">See? Just like this.</Toast.Body>\n      </Toast>\n    ) : null}\n  </>\n  {Stacking2 ? (\n    <Toast\n      aria-atomic=\"true\"\n      aria-live=\"assertive\"\n      className=\"toast fade show\"\n      role=\"alert\"\n      data-bs-autohide=\"false\"\n    >\n      <Toast.Header className=\"toast-header\">\n        <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n        <small className=\"text-muted me-3\">11 mins ago</small>{\" \"}\n        <Button\n          variant=\"\"\n          aria-label=\"Close\"\n          className=\"ms-2 mb-1 close tx-normal\"\n          data-bs-dismiss=\"toast\"\n          onClick={() => setStacking2(false)}\n          type=\"button\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </Button>\n      </Toast.Header>\n      <Toast.Body className=\"toast-body\">\n        Hello, world! This is a toast message.\n      </Toast.Body>\n    </Toast>\n  ) : null}\n</div>\n                        `}\n                      </code>\n                    </pre>\n                  </Collapse>\n                </div>\n              </div>\n            </Card.Body>\n          </Card>\n          <Card className=\"custom-card\" id=\"place\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                <h6 className=\"card-title mb-1\">Placement</h6>\n                  <Form className=\"ms-auto\">\n                    <Form.Check\n                      label=\"Show Code\"\n                       type=\"switch\"\n                      id=\"custom-switch\"\n                      onClick={() => setRightcollapse(!Rightcollapse)}\n                      className=\"showcode d-flex ms-auto \"\n                    />\n                  </Form>\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Place toasts with custom CSS as you need them. The top right\n                  is often used for notifications, as is the top middle.\n                </p>\n              </div>\n              <div className=\"text-wrap mb-3\">\n                <div className=\"example\">\n                  <div className=\"ht-150 pos-relative mb-3\">\n                    <div className=\"demo-static-toast pos-absolute t-10 r-10\">\n                      {Right ? (\n                        <Toast\n                          aria-atomic=\"true\"\n                          aria-live=\"assertive\"\n                          className=\"toast fade show\"\n                          role=\"alert\"\n                          data-bs-autohide=\"false\"\n                        >\n                          <Toast.Header className=\"toast-header\">\n                            <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                            <small className=\"text-muted me-3\">11 mins ago</small>{\" \"}\n                            <Button\n                              variant=\"\"\n                              aria-label=\"Close\"\n                              className=\"ms-2 mb-1 close tx-normal\"\n                              onClick={() => setRight(false)}\n                              data-bs-dismiss=\"toast\"\n                              type=\"button\"\n                            >\n                              <span aria-hidden=\"true\">&times;</span>\n                            </Button>\n                          </Toast.Header>\n                          <Toast.Body className=\"toast-body\">\n                            Hello, world! This is a toast message.\n                          </Toast.Body>\n                        </Toast>\n                      ) : null}\n                    </div>\n                    \n                  </div>\n                  \n                </div>\n              </div>\n              <div className=\"text-wrap mb-3\">\n                <div className=\"example\">\n                  <div className=\"demo-static-toast d-flex justify-content-center align-items-center\">\n                    {show ? (\n                      <Toast\n                        aria-atomic=\"true\"\n                        aria-live=\"assertive\"\n                        className=\"toast fade show\"\n                        role=\"alert\"\n                        data-bs-autohide=\"false\"\n                      >\n                        <Toast.Header className=\"toast-header\">\n                          <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                          <small className=\"text-muted me-3\">11 mins ago</small>{\" \"}\n                          <Button\n                            variant=\"\"\n                            aria-label=\"Close\"\n                            className=\"ms-2 mb-1 close tx-normal\"\n                            onClick={() => setShow(false)}\n                            data-bs-dismiss=\"toast\"\n                            type=\"button\"\n                          >\n                            <span aria-hidden=\"true\">&times;</span>\n                          </Button>\n                        </Toast.Header>\n                        <Toast.Body className=\"toast-body\">\n                          Hello, world! This is a toast message.\n                        </Toast.Body>\n                      </Toast>\n                    ) : null}\n                  </div>\n                </div>\n                <Collapse in={Rightcollapse} className=\"mt-2\">\n                  <pre>\n                    <code>\n                      {`\n<div className=\"demo-static-toast pos-absolute t-10 r-10\">\n  {Right ? (\n    <Toast\n      aria-atomic=\"true\"\n      aria-live=\"assertive\"\n      className=\"toast fade show\"\n      role=\"alert\"\n      data-bs-autohide=\"false\"\n    >\n      <Toast.Header className=\"toast-header\">\n        <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n        <small className=\"text-muted me-3\">11 mins ago</small>{\" \"}\n        <Button\n          variant=\"\"\n          aria-label=\"Close\"\n          className=\"ms-2 mb-1 close tx-normal\"\n          onClick={() => setRight(false)}\n          data-bs-dismiss=\"toast\"\n          type=\"button\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </Button>\n      </Toast.Header>\n      <Toast.Body className=\"toast-body\">\n        Hello, world! This is a toast message.\n      </Toast.Body>\n    </Toast>\n  ) : null}\n</div>\n                          `}\n                    </code>\n                  </pre>\n                </Collapse>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      {/* <!-- /row --> */}\n      <Row>\n        <Col xl={12}>\n          <Card className=\"custom-card\" id=\"tarns\">\n            <Card.Body>\n              <div>\n                <div className=\"d-flex\">\n                <h6 className=\"card-title mb-1\">Color Toasts</h6>\n                  <Form className=\"ms-auto\">\n                    <Form.Check\n                      label=\"Show Code\"\n                       type=\"switch\"\n                      id=\"custom-switch\"\n                      onClick={() => setListcollapse(!Listcollapse)}\n                      className=\"showcode d-flex ms-auto \"\n                    />\n                  </Form>\n                </div>\n                <p className=\"text-muted card-sub-title\">\n                  Toasts are slightly translucent, too, so they blend over\n                  whatever they might appear over.\n                </p>\n              </div>\n              <div className=\"text-wrap\">\n                <div className=\"example\">\n                  <Row>\n                    <Col xl={12}>\n                      <Row>\n                            {list.map((playerData, k) => (\n                              <Col xl={6} lg={6} md={12} key={k}>\n                                <div className=\"demo-static-toast mb-2 mt-2\">\n                                  <div\n                                    aria-atomic=\"true\"\n                                    aria-live=\"assertive\"\n                                    className=\"toast fade show\"\n                                    role=\"alert\"\n                                    data-bs-autohide=\"false\"\n                                  >\n                                    <div\n                                      className={`toast-header text-white p-2 ${playerData.TITLE}`}\n                                    >\n                                      <i className=\"fe fe-home me-2\"></i>\n                                      <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n                                      <small className=\"me-3\">11 mins ago</small>\n                                      <Button\n                                        variant=\"\"\n                                        aria-label=\"Close\"\n                                        className=\"ms-2 mb-1 close tx-normal\"\n                                        onClick={() => handleRemove(playerData.id)}\n                                        data-bs-dismiss=\"toast\"\n                                        type=\"button\"\n                                      >\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </Button>\n                                    </div>\n                                    <div className=\"toast-body p-3\">\n                                      Hello, world! This is a toast message.\n                                    </div>\n                                  </div>\n                                </div>\n                              </Col>\n                            ))}\n                      </Row>\n                    </Col>\n                  </Row>\n                </div>\n                <Collapse in={Listcollapse} className=\"mt-2\">\n                  <pre><code>\n                    {`\n<Row>\n  {list.map((playerData, k) => (\n    <Col xl={6} lg={6} md={12} key={k}>\n      <div className=\"demo-static-toast mb-2 mt-2\">\n        <div\n          aria-atomic=\"true\"\n          aria-live=\"assertive\"\n          className=\"toast fade show\"\n          role=\"alert\"\n          data-bs-autohide=\"false\"\n        >\n          <div\n            className={toast-header text-white p-2 {playerData.TITLE}}\n          >\n            <i className=\"fe fe-home me-2\"></i>\n            <h6 className=\"tx-14 mg-b-0 mg-r-auto\">Notification</h6>\n            <small className=\"me-3\">11 mins ago</small>\n            <Button\n              variant=\"\"\n              aria-label=\"Close\"\n              className=\"ms-2 mb-1 close tx-normal\"\n              onClick={() => handleRemove(playerData.id)}\n              data-bs-dismiss=\"toast\"\n              type=\"button\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </Button>\n          </div>\n          <div className=\"toast-body p-3\">\n            Hello, world! This is a toast message.\n          </div>\n        </div>\n      </div>\n    </Col>\n  ))}\n</Row>\n                    `}\n                    </code></pre>\n                </Collapse>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nToasts.propTypes = {};\n\nToasts.defaultProps = {};\n\nexport default Toasts;\n","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args); // @ts-ignore\n\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nexport default createChainedFunction;","import classNames from 'classnames';\nimport css from 'dom-helpers/css';\nimport React, { useMemo } from 'react';\nimport { ENTERED, ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport createChainedFunction from './createChainedFunction';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\n\nfunction getDefaultDimensionValue(dimension, elem) {\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\n  const value = elem[offset];\n  const margins = MARGINS[dimension];\n  return value + // @ts-ignore\n  parseInt(css(elem, margins[0]), 10) + // @ts-ignore\n  parseInt(css(elem, margins[1]), 10);\n}\n\nconst collapseStyles = {\n  [EXITED]: 'collapse',\n  [EXITING]: 'collapsing',\n  [ENTERING]: 'collapsing',\n  [ENTERED]: 'collapse show'\n};\nconst defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  getDimensionValue: getDefaultDimensionValue\n};\nconst Collapse = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  className,\n  children,\n  dimension = 'height',\n  getDimensionValue = getDefaultDimensionValue,\n  ...props\n}, ref) => {\n  /* Compute dimension */\n  const computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n  /* -- Expanding -- */\n\n  const handleEnter = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = '0';\n  }, onEnter), [computedDimension, onEnter]);\n  const handleEntering = useMemo(() => createChainedFunction(elem => {\n    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;\n    elem.style[computedDimension] = `${elem[scroll]}px`;\n  }, onEntering), [computedDimension, onEntering]);\n  const handleEntered = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onEntered), [computedDimension, onEntered]);\n  /* -- Collapsing -- */\n\n  const handleExit = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;\n    triggerBrowserReflow(elem);\n  }, onExit), [onExit, getDimensionValue, computedDimension]);\n  const handleExiting = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onExiting), [computedDimension, onExiting]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    \"aria-expanded\": props.role ? props.in : null,\n    onEnter: handleEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    childRef: children.ref,\n    children: (state, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')\n    })\n  });\n}); // @ts-ignore\n\n// @ts-ignore\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"names":["Toasts","React","show","setShow","Basic","setBasic","Basiccollapse","setBasiccollapse","Stacking","setStacking","Stackingcollapse","setStackingcollapse","Stacking2","setStacking2","Right","setRight","Rightcollapse","setRightcollapse","Listcollapse","setListcollapse","id","TITLE","list","setList","className","href","active","xl","lg","label","type","onClick","role","variant","in","map","playerData","k","md","newList","filter","handleRemove","defaultProps","funcs","f","reduce","acc","Error","args","apply","this","MARGINS","height","width","getDefaultDimensionValue","dimension","elem","value","toUpperCase","slice","margins","parseInt","css","collapseStyles","EXITED","EXITING","ENTERING","ENTERED","timeout","mountOnEnter","unmountOnExit","appear","getDimensionValue","Collapse","ref","onEnter","onEntering","onEntered","onExit","onExiting","children","props","computedDimension","handleEnter","useMemo","createChainedFunction","style","handleEntering","scroll","handleEntered","handleExit","triggerBrowserReflow","handleExiting","_jsx","TransitionWrapper","addEndListener","transitionEndListener","childRef","state","innerProps","classNames"],"sourceRoot":""}